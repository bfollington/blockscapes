/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useLayoutEffect, useMemo, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { Vector3, Vector3Props } from "@react-three/fiber";
import * as THREE from "three";

import model from "./resources/single-block.glb";
import model2 from "./resources/single-block-flower.glb";
import model3 from "./resources/single-block-grassy.glb";
import { InstancedMesh } from "three";
import { GRID } from "./App";

type Props = {
  position?: Vector3;
};

function choose<T>(l: T[]) {
  return l[Math.floor(Math.random() * l.length)];
}

const temp = new THREE.Object3D();
export function InstancedBlock({
  blocks,
  model,
}: {
  blocks: [number, number, number, number][];
  model: string;
}) {
  const { nodes, materials } = useGLTF(model) as any;
  useLayoutEffect(() => {
    nodes.Cube.geometry.computeVertexNormals();

    for (let i = 0; i < blocks.length; i++) {
      temp.scale.setScalar(1);
      const [x, y, z] = blocks[i];
      temp.position.set(x * GRID, y * GRID, z * GRID);
      temp.updateMatrix();
      ref.current?.setMatrixAt(i, temp.matrix);
    }
  }, [nodes, blocks]);

  const ref = useRef<InstancedMesh>();

  return (
    <instancedMesh
      ref={ref}
      args={[nodes.Cube.geometry, materials.delver, 32768]}
    >
      {/* <meshNormalMaterial attach="material" /> */}
    </instancedMesh>
  );
}

export default function Model(props: Props) {
  const group = useRef();
  const m = useMemo(() => choose([model, model2, model3]), []);
  const { nodes, materials } = useGLTF(m) as any;
  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube.geometry}
        material={materials.delver}
      />
    </group>
  );
}

useGLTF.preload(model);
useGLTF.preload(model2);
useGLTF.preload(model3);
